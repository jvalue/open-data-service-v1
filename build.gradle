/**
 * Copyright (c) 2019 Friedrich-Alexander University Erlangen-Nuernberg (FAU)
 *
 * SPDX-License-Identifier: AGPL-3.0-only
 */
buildscript {
	apply from: 'dependencies.gradle'

	repositories {
		jcenter()
	}
	dependencies {
		classpath "com.github.jengelman.gradle.plugins:shadow:$shadowVersion"
	}
}

plugins {
	id "com.palantir.git-version" version "0.10.1"
}

allprojects {
    group = 'org.jvalue.ods'
    version = '0.4.0'
}

wrapper {
	gradleVersion = '4.10'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: "com.github.johnrengelman.shadow"

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	ext {
		nexusPublicReleasesUrl = 'https://mojo-maven.cs.fau.de/repository/public-releases/'
	}

	javadoc {
		options.addStringOption('encoding', 'UTF-8')

		if (!JavaVersion.current().isJava8()) {
			options.addBooleanOption('html5', true)
		}
	}

	// setup generated sources (if any)
	ext {
		mainSourcesDir = 'src/main/java'
		generatedSourcesDir = 'target/generated-sources/java'
	}
	sourceSets {
		main {
			java {
				srcDir mainSourcesDir
				srcDir generatedSourcesDir
			}
		}
	}

	// default maven repo
	repositories {
		mavenLocal()
		jcenter()
		maven {
			url project.ext.nexusPublicReleasesUrl
		}
	}

	// show java compiler warnings
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked"
	}

	// one jar with all sources & dependencies
	shadowJar {
		baseName = project.name
		classifier = 'all'
		version = version
	}

	// integration test
	def testSrcDir = file('src/integrationtest/java')
	def testResourceDir = file('src/integrationtest/resources')
	sourceSets {
		integrationTest {
			java.srcDir testSrcDir
			resources.srcDir testResourceDir
			compileClasspath = sourceSets.main.output + configurations.testCompile + sourceSets.test.output
			runtimeClasspath = output + compileClasspath
		}
	}

	task integrationTest(type: Test) {
		testClassesDirs = sourceSets.integrationTest.output.classesDirs
		classpath = sourceSets.integrationTest.runtimeClasspath

		testLogging {
			events "passed", "skipped", "failed"

			afterSuite { desc, result ->
				if (!desc.parent) {
					println "Tests run: ${result.testCount}, " +
							"Failures: ${result.failedTestCount}, " +
							"Skipped: ${result.skippedTestCount}"
				}
			}
		}
	}

	test {
		// required by jmockit
		jvmArgs += '-Djdk.attach.allowAttachSelf'

		testLogging {
			events "passed", "skipped", "failed"

			afterSuite { desc, result ->
				if (!desc.parent) {
					println "Tests run: ${result.testCount}, " +
							"Failures: ${result.failedTestCount}, " +
							"Skipped: ${result.skippedTestCount}"
				}
			}
		}
	}

	// let intellij know about 'special' folders
	idea {
		module {
			testSourceDirs += testSrcDir
			sourceDirs += file(generatedSourcesDir)
		}
	}

	// publishing to nexus
	publishing {
		if (!project.ext.has('nexusUsername')) {
			project.ext.nexusUsername = ''
		}
		if (!project.ext.has('nexusPassword')) {
			project.ext.nexusPassword = ''
		}
		publications {
			nexusJava(MavenPublication) {
				from components.java
				artifact sourcesJar
				artifact javadocJar
			}
		}
		repositories {
			maven {
				url project.ext.nexusPublicReleasesUrl
				credentials {
					username nexusUsername
					password nexusPassword
				}
			}

		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	artifacts {
		archives sourcesJar, javadocJar
	}

	task copyDockerAssets(type: Copy) {
		dependsOn shadowJar
		from(libsDir) {
			include 'server*-all.jar'
		}
		into rootProject.file('docker/ods/assets/')
	}
}

def dockerDir = 'docker/ods/'
def dockerImageName = 'ods-ci/ods'

task dockerBuild {
	dependsOn ':server:copyDockerAssets'
	doLast {
		exec {
			workingDir dockerDir
			commandLine 'docker', 'build', '-t', 'ods-ci/ods', '.'
		}
	}
}
